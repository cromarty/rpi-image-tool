#!/bin/bash
#
# clone-running-pi
#
# Copyright 2017, Mike Ray, <mike.ray@btinternet.com>
#
# This is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this package; see the file COPYING.  If not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#--code--
#
# Clone running Pi.
#
# Exclude sockets, limit to one file system.
#
# Make sure the target IS on a different file-system to the root file-system
#
# rsync switches:
#
# -P: show progress 
# -a,--archive: archive mode 
# -z: compress during transfer 
# -h,--human-readable: output numbers in a human-readable format 
# -m: prune empty directories 
# -x,--one-file-system: limit to one file-system 
# -v,--verbose: verbose


export TEXTDOMAIN=rpi-image-tool
export TEXTDOMAINDIR=/usr/local/share/locale

. gettext.sh

. rpi-image-tool.lib


usage() {
scriptname=$0
echo -e $(eval_gettext "Usage: \$scriptname -b <boot mount-point> -r <root mount-point>")
} >&2

#-- main code

set -e

msg=$(gettext "This script must be run with root privilages")
(( EUID == 0 )) || { echo  "${msg}" ; exit 1 ; }


while getopts ':b:r:' flag
do
	case $flag in
		h)
		usage
		exit 0
	;;
	b)
		bootmp=$OPTARG
	;;
	r)
		rootmp=$OPTARG
	;;
	:)
		usage
		exit 1
	;;
		(?)
		usage
		exit 1
	;;
	esac
done


[ -z ${bootmp} ] && die "Boot mount-point not set"
[ -z ${rootmp} ] && die "Root mount-point not set"




#
# rsync /boot
#

rsync --archive --verbose \
		--progress --one-file-system \
		--human-readable /boot/* "${bootmp}"


#
# sync root file-system, exclude /boot
#

socketlist=$(mktemp)
find / -type s > "${socketlist}"



rsync  	--archive --verbose \
		--progress --human-readable --one-file-system \
		-exclude-from="${socketlist}" \
		--exclude=/run \
		--exclude=/dev \
		--exclude=/lost+found \
		--exclude=/tmp \
		--exclude=/proc \
		--exclude=/boot \
		--exclude=/sys / "${rootmp}"

sync


# Truncate instances of .bash_history to zero size
find "${rootmp}/root" -name .bash_history -exec truncate -s 0 {} \;
find "${rootmp}/home" -name .bash_history -exec truncate -s 0 {} \;

# Copy the backed up cmdline.txt file to cmdline.txt if it exists
# cmdline.txt.bak contains the kernel setting to run the auto-expansion script
if [ -f ${bootmp}/cmdline.txt.bak ]; then
	cp ${bootmp}/cmdline.txt.bak ${bootmp}/cmdline.txt
fi

exit 0

