#!/bin/bash
#
# Clone running Pi.
#
# Exclude sockets, limit to one file system.
#
# Make sure the target IS on a different file-system to the root file-system
#
# rsync switches:
#
# -P: show progress 
# -a: archive mode 
# -z: compress during transfer 
# -h: output numbers in a human-readable format 
# -m: prune empty directories 
# -x: limit to one file-system 
# -v: verbose


export TEXTDOMAIN=rpi-image-tool
export TEXTDOMAINDIR=/usr/local/share/locale

. gettext.sh

. rpi-image-tool.lib



usage() {
	scriptname=$0
	echo -e $(eval_gettext "Usage: \$scriptname -b <boot mount-point> -r <root mount-point>")
} >&2

#-- main code

set -e

msg=$(gettext "This script must be run with root privilages")
(( EUID == 0 )) || { echo  "${msg}" ; exit 1 ; }


while getopts ':b:r:' flag
do
	case $flag in
		h)
		usage
		exit 0
	;;
	b)
		bootmp=$OPTARG
	;;
	r)
		rootmp=$OPTARG
	;;
	:)
		usage
		exit 1
	;;
	(?)
		usage
		exit 1
	;;
	esac
done


[ -z ${bootmp} ] && die "Boot mount-point not set"
[ -z ${rootmp} ] && die "Root mount-point not set"




#
# rsync /boot
#

rsync -Pazhxv /boot/* "${bootmp}"





#
# sync root file-system, exclude /boot
#

socketlist=$(mktemp)
find / -type s > "${socketlist}"



rsync -Pazhxv \
	-X "${socketlist}" \
	--exclude=/run \
	--exclude=/dev \
	--exclude=/lost+found \
	--exclude=/tmp \
	--exclude=/proc \
	--exclude=/boot \
	--exclude=/sys /* "${rootmp}"

sync


# Truncate instances of .bash_history to zero size
find "${rootmp}/root" -name .bash_history -exec truncate -s 0 {} \;
find "${rootmp}/home" -name .bash_history -exec truncate -s 0 {} \;
